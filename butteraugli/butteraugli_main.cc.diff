5c5
< #include "butteraugli/butteraugli.h"
---
> #include "butteraugli.h"
7,10c7
< extern "C" {
< #include "png.h"
< #include "jpeglib.h"
< }
---
> #include <emscripten.h>
17,53c14
< bool ReadPNG(FILE* f, std::vector<Image8>* rgb) {
<   png_structp png_ptr =
<       png_create_read_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
<   if (!png_ptr) {
<     return false;
<   }
< 
<   png_infop info_ptr = png_create_info_struct(png_ptr);
<   if (!info_ptr) {
<     png_destroy_read_struct(&png_ptr, NULL, NULL);
<     return false;
<   }
< 
<   if (setjmp(png_jmpbuf(png_ptr)) != 0) {
<     // Ok we are here because of the setjmp.
<     png_destroy_read_struct(&png_ptr, &info_ptr, NULL);
<     return false;
<   }
< 
<   rewind(f);
<   png_init_io(png_ptr, f);
< 
<   // The png_transforms flags are as follows:
<   // packing == convert 1,2,4 bit images,
<   // strip == 16 -> 8 bits / channel,
<   // shift == use sBIT dynamics, and
<   // expand == palettes -> rgb, grayscale -> 8 bit images, tRNS -> alpha.
<   const unsigned int png_transforms =
<       PNG_TRANSFORM_PACKING | PNG_TRANSFORM_EXPAND | PNG_TRANSFORM_STRIP_16;
< 
<   png_read_png(png_ptr, info_ptr, png_transforms, NULL);
< 
<   png_bytep* row_pointers = png_get_rows(png_ptr, info_ptr);
< 
<   const int xsize = png_get_image_width(png_ptr, info_ptr);
<   const int ysize = png_get_image_height(png_ptr, info_ptr);
<   const int components = png_get_channels(png_ptr, info_ptr);
---
> bool ReadRGBA(uint8_t* rgba, std::vector<Image8>* rgb, int xsize, int ysize) {
55a17
>   rgb->push_back(Image8(xsize, ysize));
57,71c19,31
<   switch (components) {
<     case 1: {
<       // GRAYSCALE
<       for (int y = 0; y < ysize; ++y) {
<         const uint8_t* const BUTTERAUGLI_RESTRICT row = row_pointers[y];
<         uint8_t* const BUTTERAUGLI_RESTRICT row0 = (*rgb)[0].Row(y);
<         uint8_t* const BUTTERAUGLI_RESTRICT row1 = (*rgb)[1].Row(y);
<         uint8_t* const BUTTERAUGLI_RESTRICT row2 = (*rgb)[2].Row(y);
< 
<         for (int x = 0; x < xsize; ++x) {
<           const uint8_t gray = row[x];
<           row0[x] = row1[x] = row2[x] = gray;
<         }
<       }
<       break;
---
>   for (int y = 0; y < ysize; ++y) {
>     uint8_t* const BUTTERAUGLI_RESTRICT row0 = (*rgb)[0].Row(y);
>     uint8_t* const BUTTERAUGLI_RESTRICT row1 = (*rgb)[1].Row(y);
>     uint8_t* const BUTTERAUGLI_RESTRICT row2 = (*rgb)[2].Row(y);
>     uint8_t* const BUTTERAUGLI_RESTRICT row3 = (*rgb)[3].Row(y);
> 
>     int offset = xsize * 4 * y;
> 
>     for (int x = 0; x < xsize; ++x) {
>       row0[x] = rgba[offset + 4 * x + 0];
>       row1[x] = rgba[offset + 4 * x + 1];
>       row2[x] = rgba[offset + 4 * x + 2];
>       row3[x] = rgba[offset + 4 * x + 3];
73,131d32
<     case 2: {
<       // GRAYSCALE_ALPHA
<       rgb->push_back(Image8(xsize, ysize));
<       for (int y = 0; y < ysize; ++y) {
<         const uint8_t* const BUTTERAUGLI_RESTRICT row = row_pointers[y];
<         uint8_t* const BUTTERAUGLI_RESTRICT row0 = (*rgb)[0].Row(y);
<         uint8_t* const BUTTERAUGLI_RESTRICT row1 = (*rgb)[1].Row(y);
<         uint8_t* const BUTTERAUGLI_RESTRICT row2 = (*rgb)[2].Row(y);
<         uint8_t* const BUTTERAUGLI_RESTRICT row3 = (*rgb)[3].Row(y);
< 
<         for (int x = 0; x < xsize; ++x) {
<           const uint8_t gray = row[2 * x + 0];
<           const uint8_t alpha = row[2 * x + 1];
<           row0[x] = gray;
<           row1[x] = gray;
<           row2[x] = gray;
<           row3[x] = alpha;
<         }
<       }
<       break;
<     }
<     case 3: {
<       // RGB
<       for (int y = 0; y < ysize; ++y) {
<         const uint8_t* const BUTTERAUGLI_RESTRICT row = row_pointers[y];
<         uint8_t* const BUTTERAUGLI_RESTRICT row0 = (*rgb)[0].Row(y);
<         uint8_t* const BUTTERAUGLI_RESTRICT row1 = (*rgb)[1].Row(y);
<         uint8_t* const BUTTERAUGLI_RESTRICT row2 = (*rgb)[2].Row(y);
< 
<         for (int x = 0; x < xsize; ++x) {
<           row0[x] = row[3 * x + 0];
<           row1[x] = row[3 * x + 1];
<           row2[x] = row[3 * x + 2];
<         }
<       }
<       break;
<     }
<     case 4: {
<       // RGBA
<       rgb->push_back(Image8(xsize, ysize));
<       for (int y = 0; y < ysize; ++y) {
<         const uint8_t* const BUTTERAUGLI_RESTRICT row = row_pointers[y];
<         uint8_t* const BUTTERAUGLI_RESTRICT row0 = (*rgb)[0].Row(y);
<         uint8_t* const BUTTERAUGLI_RESTRICT row1 = (*rgb)[1].Row(y);
<         uint8_t* const BUTTERAUGLI_RESTRICT row2 = (*rgb)[2].Row(y);
<         uint8_t* const BUTTERAUGLI_RESTRICT row3 = (*rgb)[3].Row(y);
< 
<         for (int x = 0; x < xsize; ++x) {
<           row0[x] = row[4 * x + 0];
<           row1[x] = row[4 * x + 1];
<           row2[x] = row[4 * x + 2];
<           row3[x] = row[4 * x + 3];
<         }
<       }
<       break;
<     }
<     default:
<       png_destroy_read_struct(&png_ptr, &info_ptr, NULL);
<       return false;
133c34
<   png_destroy_read_struct(&png_ptr, &info_ptr, NULL);
---
> 
148,234d48
< void jpeg_catch_error(j_common_ptr cinfo) {
<   (*cinfo->err->output_message) (cinfo);
<   jmp_buf* jpeg_jmpbuf = (jmp_buf*) cinfo->client_data;
<   jpeg_destroy(cinfo);
<   longjmp(*jpeg_jmpbuf, 1);
< }
< 
< // "rgb": cleared and filled with same-sized image planes (one per channel);
< // either RGB, or RGBA if the PNG contains an alpha channel.
< bool ReadJPEG(FILE* f, std::vector<Image8>* rgb) {
<   rewind(f);
< 
<   struct jpeg_decompress_struct cinfo;
<   struct jpeg_error_mgr jerr;
<   cinfo.err = jpeg_std_error(&jerr);
<   jmp_buf jpeg_jmpbuf;
<   cinfo.client_data = &jpeg_jmpbuf;
<   jerr.error_exit = jpeg_catch_error;
<   if (setjmp(jpeg_jmpbuf)) {
<     return false;
<   }
< 
<   jpeg_create_decompress(&cinfo);
< 
<   jpeg_stdio_src(&cinfo, f);
<   jpeg_read_header(&cinfo, TRUE);
<   jpeg_start_decompress(&cinfo);
< 
<   int row_stride = cinfo.output_width * cinfo.output_components;
<   JSAMPARRAY buffer = (*cinfo.mem->alloc_sarray)
<     ((j_common_ptr) &cinfo, JPOOL_IMAGE, row_stride, 1);
< 
<   const size_t xsize = cinfo.output_width;
<   const size_t ysize = cinfo.output_height;
< 
<   *rgb = CreatePlanes<uint8_t>(xsize, ysize, 3);
< 
<   switch (cinfo.out_color_space) {
<     case JCS_GRAYSCALE:
<       while (cinfo.output_scanline < cinfo.output_height) {
<         jpeg_read_scanlines(&cinfo, buffer, 1);
< 
<         const uint8_t* const BUTTERAUGLI_RESTRICT row = buffer[0];
<         uint8_t* const BUTTERAUGLI_RESTRICT row0 =
<             (*rgb)[0].Row(cinfo.output_scanline - 1);
<         uint8_t* const BUTTERAUGLI_RESTRICT row1 =
<             (*rgb)[1].Row(cinfo.output_scanline - 1);
<         uint8_t* const BUTTERAUGLI_RESTRICT row2 =
<             (*rgb)[2].Row(cinfo.output_scanline - 1);
< 
<         for (int x = 0; x < xsize; x++) {
<           const uint8_t gray = row[x];
<           row0[x] = row1[x] = row2[x] = gray;
<         }
<       }
<       break;
< 
<     case JCS_RGB:
<       while (cinfo.output_scanline < cinfo.output_height) {
<         jpeg_read_scanlines(&cinfo, buffer, 1);
< 
<         const uint8_t* const BUTTERAUGLI_RESTRICT row = buffer[0];
<         uint8_t* const BUTTERAUGLI_RESTRICT row0 =
<             (*rgb)[0].Row(cinfo.output_scanline - 1);
<         uint8_t* const BUTTERAUGLI_RESTRICT row1 =
<             (*rgb)[1].Row(cinfo.output_scanline - 1);
<         uint8_t* const BUTTERAUGLI_RESTRICT row2 =
<             (*rgb)[2].Row(cinfo.output_scanline - 1);
< 
<         for (int x = 0; x < xsize; x++) {
<           row0[x] = row[3 * x + 0];
<           row1[x] = row[3 * x + 1];
<           row2[x] = row[3 * x + 2];
<         }
<       }
<       break;
< 
<     default:
<       jpeg_destroy_decompress(&cinfo);
<       return false;
<   }
< 
<   jpeg_finish_decompress(&cinfo);
<   jpeg_destroy_decompress(&cinfo);
<   return true;
< }
< 
245,257d58
<   if (rgb.size() == 3) {  // RGB
<     for (int c = 0; c < 3; c++) {
<       linear.push_back(ImageF(xsize, ysize));
<       for (int y = 0; y < ysize; ++y) {
<         const uint8_t* const BUTTERAUGLI_RESTRICT row_rgb = rgb[c].Row(y);
<         float* const BUTTERAUGLI_RESTRICT row_linear = linear[c].Row(y);
<         for (size_t x = 0; x < xsize; x++) {
<           const int value = row_rgb[x];
<           row_linear[x] = kSrgbToLinearTable[value];
<         }
<       }
<     }
<   } else {  // RGBA
280,308d80
<   }
< }
< 
< std::vector<Image8> ReadImageOrDie(const char* filename) {
<   std::vector<Image8> rgb;
<   FILE* f = fopen(filename, "rb");
<   if (!f) {
<     fprintf(stderr, "Cannot open %s\n", filename);
<     exit(1);
<   }
<   unsigned char magic[2];
<   if (fread(magic, 1, 2, f) != 2) {
<     fprintf(stderr, "Cannot read from %s\n", filename);
<     exit(1);
<   }
<   if (magic[0] == 0xFF && magic[1] == 0xD8) {
<     if (!ReadJPEG(f, &rgb)) {
<       fprintf(stderr, "File %s is a malformed JPEG.\n", filename);
<       exit(1);
<     }
<   } else {
<     if (!ReadPNG(f, &rgb)) {
<       fprintf(stderr, "File %s is neither a valid JPEG nor a valid PNG.\n",
<               filename);
<       exit(1);
<     }
<   }
<   fclose(f);
<   return rgb;
362,369c134,136
< int Run(int argc, char* argv[]) {
<   if (argc != 3 && argc != 4) {
<     fprintf(stderr,
<             "Usage: %s {image1.(png|jpg|jpeg)} {image2.(png|jpg|jpeg)} "
<             "[heatmap.ppm]\n",
<             argv[0]);
<     return 1;
<   }
---
> double Run(uint8_t* rgba1, uint8_t* rgba2, int width, int height, uint8_t* heatmap) {
>   bool rgba1HasTransparency = false;
>   bool rgba2HasTransparency = false;
371,372c138,143
<   std::vector<Image8> rgb1 = ReadImageOrDie(argv[1]);
<   std::vector<Image8> rgb2 = ReadImageOrDie(argv[2]);
---
>   for (int i = 0; i < sizeof(rgba1); i += 4) {
>     if (rgba1[i + 3] < 255) {
>       rgba1HasTransparency = true;
>       break;
>     }
>   }
374,383c145,149
<   if (rgb1.size() == 3 && rgb2.size() == 4) {
<     // Adding a missing alpha channel to one of the images.
<     rgb1.push_back(Image8(rgb1[0].xsize(), rgb1[0].ysize(), 255));
<   } else if (rgb2.size() == 3 && rgb1.size() == 4) {
<     // Adding a missing alpha channel to one of the images.
<     rgb2.push_back(Image8(rgb2[0].xsize(), rgb2[0].ysize(), 255));
<   } else if (rgb1.size() != rgb2.size()) {
<     fprintf(stderr, "Different number of channels: %lu vs %lu\n", rgb1.size(),
<             rgb2.size());
<     exit(1);
---
>   for (int i = 0; i < sizeof(rgba2); i += 4) {
>     if (rgba2[i + 3] < 255) {
>       rgba2HasTransparency = true;
>       break;
>     }
385a152,157
>   std::vector<Image8> rgb1;
>   std::vector<Image8> rgb2;
> 
>   ReadRGBA(rgba1, &rgb1, width, height);
>   ReadRGBA(rgba2, &rgb2, width, height);
> 
392c164
<       return 1;
---
>       return 1.0;
398a171
> 
401a175
> 
403a178
> 
407c182
<     return 1;
---
>     return 1.0;
408a184
> 
410c186,187
<   if (rgb1.size() == 4 || rgb2.size() == 4) {
---
> 
>   if (rgba1HasTransparency || rgba2HasTransparency) {
420c197
<       return 1;
---
>       return 1.0;
427d203
<   printf("%lf\n", diff_value);
429d204
<   if (argc == 4) {
435,453c210,218
<     FILE* const fmap = fopen(argv[3], "wb");
<     if (fmap == NULL) {
<       fprintf(stderr, "Cannot open %s\n", argv[3]);
<       perror("fopen");
<       return 1;
<     }
<     bool ok = true;
<     if (fprintf(fmap, "P6\n%lu %lu\n255\n",
<                       rgb1[0].xsize(), rgb1[0].ysize()) < 0){
<       perror("fprintf");
<       ok = false;
<     }
<     if (ok && fwrite(rgb.data(), 1, rgb.size(), fmap) != rgb.size()) {
<       perror("fwrite");
<       ok = false;
<     }
<     if (fclose(fmap) != 0) {
<       perror("fclose");
<       ok = false;
---
> 
>     int j = 0;
> 
>     for (int i = 0; i < rgb.size(); i += 3) {
>       heatmap[j + 0] = rgb[i + 0];
>       heatmap[j + 1] = rgb[i + 1];
>       heatmap[j + 2] = rgb[i + 2];
>       heatmap[j + 3] = 255;
>       j += 4;
455,456d219
<     if (!ok) return 1;
<   }
458c221
<   return 0;
---
>     return diff_value;
462a226,237
> int main(int argc, char** argv) {}
> 
> extern "C" {
> double butteraugli_output(uint8_t* rgba1, uint8_t* rgba2, int width, int height, uint8_t* heatmap) {
> return butteraugli::Run(
>     rgba1,
>     rgba2,
>     width,
>     height,
>     heatmap
>   );
> }
464c239,242
< int main(int argc, char** argv) { return butteraugli::Run(argc, argv); }
---
> void mfree(uint8_t* p) {
>   free(p);
> }
> }
