32c32
< #include "butteraugli/butteraugli.h"
---
> #include "butteraugli.h"
193c193
<   const int offset = kernel.size() / 2;
---
>   const int offset = len / 2;
198c198
<   float scale_no_border = 1.0f / weight_no_border;
---
>   const float scale_no_border = 1.0f / weight_no_border;
201,203c201,203
<   std::vector<float> scaled_kernel = kernel;
<   for (int i = 0; i < scaled_kernel.size(); ++i) {
<     scaled_kernel[i] *= scale_no_border;
---
>   float* BUTTERAUGLI_RESTRICT scaled_kernel = (float*)malloc((len/2+1)*sizeof(float));
>   for (int i = 0; i <= len/2; ++i) {
>     scaled_kernel[i] = kernel[i] * scale_no_border;
211,221c211,388
<   for (size_t y = 0; y < in.ysize(); ++y) {
<     const float* const BUTTERAUGLI_RESTRICT row_in = in.Row(y);
<     for (int x = border1; x < border2; ++x) {
<       const int d = x - offset;
<       float* const BUTTERAUGLI_RESTRICT row_out = out.Row(x);
<       float sum = 0.0f;
<       for (int j = 0; j < len; ++j) {
<         sum += row_in[d + j] * scaled_kernel[j];
<       }
<       row_out[y] = sum;
<     }
---
>   switch(len) {
> 		#if 1   // speed-optimized version
> 		case 5:  {
> 		  const float sk0 = scaled_kernel[0];
> 		  const float sk1 = scaled_kernel[1];
> 		  const float sk2 = scaled_kernel[2];
> 		  for (size_t y = 0; y < in.ysize(); ++y) {
> 		    const float* BUTTERAUGLI_RESTRICT row_in = in.Row(y) + border1 - offset;
> 		    for (int x = border1; x < border2; ++x, ++row_in) {
> 		      float sum  = (row_in[ 0] + row_in[ 4]) * sk0;
> 		            sum += (row_in[ 1] + row_in[ 3]) * sk1;
> 		            sum += (row_in[ 2]             ) * sk2;
> 		      float* const BUTTERAUGLI_RESTRICT row_out = out.Row(x);
> 		      row_out[y] = sum;
> 		    }
> 		  }}
> 		  break;
> 		case 9: {
> 		  const float sk0 = scaled_kernel[0];
> 		  const float sk1 = scaled_kernel[1];
> 		  const float sk2 = scaled_kernel[2];
> 		  const float sk3 = scaled_kernel[3];
> 		  const float sk4 = scaled_kernel[4];
> 		  for (size_t y = 0; y < in.ysize(); ++y) {
> 		    const float* BUTTERAUGLI_RESTRICT row_in = in.Row(y) + border1 - offset;
> 		    for (int x = border1; x < border2; ++x, ++row_in) {
> 		      float sum  = (row_in[ 0] + row_in[ 8]) * sk0;
> 		            sum += (row_in[ 1] + row_in[ 7]) * sk1;
> 		            sum += (row_in[ 2] + row_in[ 6]) * sk2;
> 		            sum += (row_in[ 3] + row_in[ 5]) * sk3;
> 		            sum += (row_in[ 4]             ) * sk4;
> 		      float* const BUTTERAUGLI_RESTRICT row_out = out.Row(x);
> 		      row_out[y] = sum;
> 		    }
> 		  }}
> 		  break;
> 		case 17:
> 		  for (size_t y = 0; y < in.ysize(); ++y) {
> 		    const float* BUTTERAUGLI_RESTRICT row_in = in.Row(y) + border1 - offset;
> 		    for (int x = border1; x < border2; ++x, ++row_in) {
> 		      float sum  = (row_in[ 0] + row_in[16]) * scaled_kernel[0];
> 		            sum += (row_in[ 1] + row_in[15]) * scaled_kernel[1];
> 		            sum += (row_in[ 2] + row_in[14]) * scaled_kernel[2];
> 		            sum += (row_in[ 3] + row_in[13]) * scaled_kernel[3];
> 		            sum += (row_in[ 4] + row_in[12]) * scaled_kernel[4];
> 		            sum += (row_in[ 5] + row_in[11]) * scaled_kernel[5];
> 		            sum += (row_in[ 6] + row_in[10]) * scaled_kernel[6];
> 		            sum += (row_in[ 7] + row_in[ 9]) * scaled_kernel[7];
> 		            sum += (row_in[ 8]             ) * scaled_kernel[8];
> 		      float* const BUTTERAUGLI_RESTRICT row_out = out.Row(x);
> 		      row_out[y] = sum;
> 		    }
> 		  }
> 		  break;
> 		case 33:
> 		  for (size_t y = 0; y < in.ysize(); ++y) {
> 		    const float* BUTTERAUGLI_RESTRICT row_in = in.Row(y) + border1 - offset;
> 		    for (int x = border1; x < border2; ++x, ++row_in) {
> 		      float sum  = (row_in[ 0] + row_in[32]) * scaled_kernel[ 0];
> 		            sum += (row_in[ 1] + row_in[31]) * scaled_kernel[ 1];
> 		            sum += (row_in[ 2] + row_in[30]) * scaled_kernel[ 2];
> 		            sum += (row_in[ 3] + row_in[29]) * scaled_kernel[ 3];
> 		            sum += (row_in[ 4] + row_in[28]) * scaled_kernel[ 4];
> 		            sum += (row_in[ 5] + row_in[27]) * scaled_kernel[ 5];
> 		            sum += (row_in[ 6] + row_in[26]) * scaled_kernel[ 6];
> 		            sum += (row_in[ 7] + row_in[25]) * scaled_kernel[ 7];
> 		            sum += (row_in[ 8] + row_in[24]) * scaled_kernel[ 8];
> 		            sum += (row_in[ 9] + row_in[23]) * scaled_kernel[ 9];
> 		            sum += (row_in[10] + row_in[22]) * scaled_kernel[10];
> 		            sum += (row_in[11] + row_in[21]) * scaled_kernel[11];
> 		            sum += (row_in[12] + row_in[20]) * scaled_kernel[12];
> 		            sum += (row_in[13] + row_in[19]) * scaled_kernel[13];
> 		            sum += (row_in[14] + row_in[18]) * scaled_kernel[14];
> 		            sum += (row_in[15] + row_in[17]) * scaled_kernel[15];
> 		            sum += (row_in[16]             ) * scaled_kernel[16];
> 		      float* const BUTTERAUGLI_RESTRICT row_out = out.Row(x);
> 		      row_out[y] = sum;
> 		    }
> 		  }
> 		  break;
> 		case 11:
> 		  for (size_t y = 0; y < in.ysize(); ++y) {
> 		    const float* BUTTERAUGLI_RESTRICT row_in = in.Row(y) + border1 - offset;
> 		    for (int x = border1; x < border2; ++x, ++row_in) {
> 		      float sum  = (row_in[ 0] + row_in[10]) * scaled_kernel[0];
> 		            sum += (row_in[ 1] + row_in[ 9]) * scaled_kernel[1];
> 		            sum += (row_in[ 2] + row_in[ 8]) * scaled_kernel[2];
> 		            sum += (row_in[ 3] + row_in[ 7]) * scaled_kernel[3];
> 		            sum += (row_in[ 4] + row_in[ 6]) * scaled_kernel[4];
> 		            sum += (row_in[ 5]             ) * scaled_kernel[5];
> 		      float* const BUTTERAUGLI_RESTRICT row_out = out.Row(x);
> 		      row_out[y] = sum;
> 		    }
> 		  }
> 		  break;
> 		case 41:
> 		  for (size_t y = 0; y < in.ysize(); ++y) {
> 		    const float* BUTTERAUGLI_RESTRICT row_in = in.Row(y) + border1 - offset;
> 		    for (int x = border1; x < border2; ++x, ++row_in) {
> 		      float sum  = (row_in[ 0] + row_in[40]) * scaled_kernel[ 0];
> 		            sum += (row_in[ 1] + row_in[39]) * scaled_kernel[ 1];
> 		            sum += (row_in[ 2] + row_in[38]) * scaled_kernel[ 2];
> 		            sum += (row_in[ 3] + row_in[37]) * scaled_kernel[ 3];
> 		            sum += (row_in[ 4] + row_in[36]) * scaled_kernel[ 4];
> 		            sum += (row_in[ 5] + row_in[35]) * scaled_kernel[ 5];
> 		            sum += (row_in[ 6] + row_in[34]) * scaled_kernel[ 6];
> 		            sum += (row_in[ 7] + row_in[33]) * scaled_kernel[ 7];
> 		            sum += (row_in[ 8] + row_in[32]) * scaled_kernel[ 8];
> 		            sum += (row_in[ 9] + row_in[31]) * scaled_kernel[ 9];
> 		            sum += (row_in[10] + row_in[30]) * scaled_kernel[10];
> 		            sum += (row_in[11] + row_in[29]) * scaled_kernel[11];
> 		            sum += (row_in[12] + row_in[28]) * scaled_kernel[12];
> 		            sum += (row_in[13] + row_in[27]) * scaled_kernel[13];
> 		            sum += (row_in[14] + row_in[26]) * scaled_kernel[14];
> 		            sum += (row_in[15] + row_in[25]) * scaled_kernel[15];
> 		            sum += (row_in[16] + row_in[24]) * scaled_kernel[16];
> 		            sum += (row_in[17] + row_in[23]) * scaled_kernel[17];
> 		            sum += (row_in[18] + row_in[22]) * scaled_kernel[18];
> 		            sum += (row_in[19] + row_in[21]) * scaled_kernel[19];
> 		            sum += (row_in[20]             ) * scaled_kernel[20];
> 		      float* const BUTTERAUGLI_RESTRICT row_out = out.Row(x);
> 		      row_out[y] = sum;
> 		    }
> 		  }
> 		  break;
> 		case 47:
> 		  for (size_t y = 0; y < in.ysize(); ++y) {
> 		    const float* BUTTERAUGLI_RESTRICT row_in = in.Row(y) + border1 - offset;
> 		    for (int x = border1; x < border2; ++x, ++row_in) {
> 		      float sum  = (row_in[ 0] + row_in[46]) * scaled_kernel[ 0];
> 		            sum += (row_in[ 1] + row_in[45]) * scaled_kernel[ 1];
> 		            sum += (row_in[ 2] + row_in[44]) * scaled_kernel[ 2];
> 		            sum += (row_in[ 3] + row_in[43]) * scaled_kernel[ 3];
> 		            sum += (row_in[ 4] + row_in[42]) * scaled_kernel[ 4];
> 		            sum += (row_in[ 5] + row_in[41]) * scaled_kernel[ 5];
> 		            sum += (row_in[ 6] + row_in[40]) * scaled_kernel[ 6];
> 		            sum += (row_in[ 7] + row_in[39]) * scaled_kernel[ 7];
> 		            sum += (row_in[ 8] + row_in[38]) * scaled_kernel[ 8];
> 		            sum += (row_in[ 9] + row_in[37]) * scaled_kernel[ 9];
> 		            sum += (row_in[10] + row_in[36]) * scaled_kernel[10];
> 		            sum += (row_in[11] + row_in[35]) * scaled_kernel[11];
> 		            sum += (row_in[12] + row_in[34]) * scaled_kernel[12];
> 		            sum += (row_in[13] + row_in[33]) * scaled_kernel[13];
> 		            sum += (row_in[14] + row_in[32]) * scaled_kernel[14];
> 		            sum += (row_in[15] + row_in[31]) * scaled_kernel[15];
> 		            sum += (row_in[16] + row_in[30]) * scaled_kernel[16];
> 		            sum += (row_in[17] + row_in[29]) * scaled_kernel[17];
> 		            sum += (row_in[18] + row_in[28]) * scaled_kernel[18];
> 		            sum += (row_in[19] + row_in[27]) * scaled_kernel[19];
> 		            sum += (row_in[20] + row_in[26]) * scaled_kernel[20];
> 		            sum += (row_in[21] + row_in[25]) * scaled_kernel[21];
> 		            sum += (row_in[22] + row_in[24]) * scaled_kernel[22];
> 		            sum += (row_in[23]             ) * scaled_kernel[23];
> 		      float* const BUTTERAUGLI_RESTRICT row_out = out.Row(x);
> 		      row_out[y] = sum;
> 		    }
> 		  }
> 		  break;
> 		default:
> 			printf("Warning: Unexpected kernel size! %d\n", len);
> 		#else
> 		default:
> 		#endif
>          for (size_t y = 0; y < in.ysize(); ++y) {
>            const float* const BUTTERAUGLI_RESTRICT row_in = in.Row(y);
>            for (int j, x = border1; x < border2; ++x) {
>              const int d = x - offset;
>              float* const BUTTERAUGLI_RESTRICT row_out = out.Row(x);
>              float sum = 0.0f;
>              for (j = 0; j <= len/2; ++j) {
>                sum += row_in[d + j] * scaled_kernel[j];
>              }
>              for (; j < len; ++j) {
>                sum += row_in[d + j] * scaled_kernel[len-1-j];
>              }
>              row_out[y] = sum;
>            }
>          }
227a395
>   free(scaled_kernel);
518a687,689
>       float*       BUTTERAUGLI_RESTRICT const row_mf = ps.mf[i].Row(y);
>       float*       BUTTERAUGLI_RESTRICT const row_lf = ps.lf[i].Row(y);
>       const float* BUTTERAUGLI_RESTRICT const row_xyb  = xyb[i].Row(y);
520c691
<         ps.mf[i].Row(y)[x] = xyb[i].Row(y)[x] - ps.lf[i].Row(y)[x];
---
>         row_mf[x] = row_xyb[x] - row_lf[x];
532,534c703,706
<       for (size_t x = 0; x < xsize; ++x) {
<         row_hf[x] = row_mf[x];
<       }
---
>       //for (size_t x = 0; x < xsize; ++x) {
>       //  row_hf[x] = row_mf[x];
>       //}
>       memcpy(row_hf, row_mf, xsize*sizeof(float));
569,571c741,744
<       for (size_t x = 0; x < xsize; ++x) {
<         row_uhf[x] = row_hf[x];
<       }
---
>       //for (size_t x = 0; x < xsize; ++x) {
>       //  row_uhf[x] = row_hf[x];
>       //}
>       memcpy(row_uhf, row_hf, xsize*sizeof(float));
757a931,942
>     if (a==0)
>     for (size_t y = 0; y < ysize; ++y) {
>       const float* const BUTTERAUGLI_RESTRICT row_hf0 = pi0.hf[i].Row(y);
>       const float* const BUTTERAUGLI_RESTRICT row_hf1 = pi1.hf[i].Row(y);
>       float* const BUTTERAUGLI_RESTRICT row0 = mask_xyb0[i].Row(y);
>       float* const BUTTERAUGLI_RESTRICT row1 = mask_xyb1[i].Row(y);
>       for (size_t x = 0; x < xsize; ++x) {
>         row0[x] = b * row_hf0[x];
>         row1[x] = b * row_hf1[x];
>       }
>     }
>     else
1467c1652,1653
<   std::vector<float> diffs(ysize_ * xsize_);
---
>   //std::vector<float> diffs(ysize_ * xsize_);
>   float *diffs = (float*)malloc(ysize_ * xsize_ * sizeof(float));
1472,1479d1657
<       const float absval = 0.5 * std::abs(row0[x]) + 0.5 * std::abs(row1[x]);
<       const float diff = row0[x] - row1[x];
<       const float scaler = norm2_0gt1 / (static_cast<float>(norm1) + absval);
< 
<       // Primary symmetric quadratic objective.
<       diffs[ix] = scaler * diff;
< 
<       const float scaler2 = norm2_0lt1 / (static_cast<float>(norm1) + absval);
1481d1658
< 
1484a1662
>       double impact = 0;
1488,1493c1666
<           double impact = scaler2 * (row1[x] + too_small);
<           if (diff < 0) {
<             diffs[ix] -= impact;
<           } else {
<             diffs[ix] += impact;
<           }
---
>           impact = (row1[x] + too_small) * norm2_0lt1;
1495,1500c1668
<           double impact = scaler2 * (-row1[x] - too_big);
<           if (diff < 0) {
<             diffs[ix] -= impact;
<           } else {
<             diffs[ix] += impact;
<           }
---
>           impact = (-row1[x] - too_big) * norm2_0lt1;
1504,1509c1672
<           double impact = scaler2 * (too_small - row1[x]);
<           if (diff < 0) {
<             diffs[ix] -= impact;
<           } else {
<             diffs[ix] += impact;
<           }
---
>           impact = (too_small - row1[x]) * norm2_0lt1;
1511,1516c1674
<           double impact = scaler2 * (row1[x] - too_big);
<           if (diff < 0) {
<             diffs[ix] -= impact;
<           } else {
<             diffs[ix] += impact;
<           }
---
>           impact =(row1[x] - too_big) * norm2_0lt1;
1519,1520c1677,1686
<     }
<   }
---
>       const float diff = row0[x] - row1[x];
>       if (diff < 0)
>         impact = -impact;
>       const float scaler = (std::abs(row0[x]) + std::abs(row1[x])) * 0.5  +
>                            static_cast<float>(norm1);
>       // Primary symmetric quadratic objective.
>       diffs[ix] = (norm2_0gt1 * diff  + impact) / scaler;
> 
>     }//x
>   }//y
1544d1709
< 
1558a1724
>   free(diffs);
1596a1763,1774
>     const float* const BUTTERAUGLI_RESTRICT msk0 = mask_xyb[0].Row(y);
>     const float* const BUTTERAUGLI_RESTRICT msk1 = mask_xyb[1].Row(y);
>     const float* const BUTTERAUGLI_RESTRICT msk2 = mask_xyb[2].Row(y);
>     const float* const BUTTERAUGLI_RESTRICT dcmsk0 = mask_xyb_dc[0].Row(y);
>     const float* const BUTTERAUGLI_RESTRICT dcmsk1 = mask_xyb_dc[1].Row(y);
>     const float* const BUTTERAUGLI_RESTRICT dcmsk2 = mask_xyb_dc[2].Row(y);
>     const float* const BUTTERAUGLI_RESTRICT bddc0 = block_diff_dc[0].Row(y);
>     const float* const BUTTERAUGLI_RESTRICT bddc1 = block_diff_dc[1].Row(y);
>     const float* const BUTTERAUGLI_RESTRICT bddc2 = block_diff_dc[2].Row(y);
>     const float* const BUTTERAUGLI_RESTRICT bdac0 = block_diff_ac[0].Row(y);
>     const float* const BUTTERAUGLI_RESTRICT bdac1 = block_diff_ac[1].Row(y);
>     const float* const BUTTERAUGLI_RESTRICT bdac2 = block_diff_ac[2].Row(y);
1597a1776
>       /*
1608a1788,1792
>       */
>       row_out[x] =
> 			bddc0[x] * dcmsk0[x]  + bdac0[x] * msk0[x] +
> 			bddc1[x] * dcmsk1[x]  + bdac1[x] * msk1[x] +
> 			bddc2[x] * dcmsk2[x]  + bdac2[x] * msk2[x];
1759,1761c1943,1946
<       for (size_t x = 0; x < xsize; ++x) {
<         (*mask)[0].Row(y)[x] = blurred.Row(y)[x];
<       }
---
>       //for (size_t x = 0; x < xsize; ++x) {
>       //  (*mask)[0].Row(y)[x] = blurred.Row(y)[x];
>       //}
>       memcpy((*mask)[0].Row(y), blurred.Row(y), xsize*sizeof(float));
1770a1956,1958
>       const float* b1_row = blurred1.Row(y);
>       const float* b2_row = blurred2.Row(y);
>       float* const m_row = (*mask)[1].Row(y);
1773,1775c1961,1963
<             muls[0] * blurred1.Row(y)[x] +
<             muls[1] * blurred2.Row(y)[x]);
<         (*mask)[1].Row(y)[x] = val;
---
>             muls[0] * b1_row[x] +
>             muls[1] * b2_row[x]);
>         m_row[x] = val;
1793a1982,1987
>     float* const m0_row = (*mask)[0].Row(y);
>     float* const m1_row = (*mask)[1].Row(y);
>     float* const m2_row = (*mask)[2].Row(y);
>     float* const mdc0_row = (*mask_dc)[0].Row(y);
>     float* const mdc1_row = (*mask_dc)[1].Row(y);
>     float* const mdc2_row = (*mask_dc)[2].Row(y);
1795,1796c1989,1990
<       const double s0 = (*mask)[0].Row(y)[x];
<       const double s1 = (*mask)[1].Row(y)[x];
---
>       const double s0 = m0_row[x];
>       const double s1 = m1_row[x];
1799,1805c1993,1998
< 
<       (*mask)[0].Row(y)[x] = MaskX(p0);
<       (*mask)[1].Row(y)[x] = MaskY(p1);
<       (*mask)[2].Row(y)[x] = w_ytob_hf * MaskY(p1);
<       (*mask_dc)[0].Row(y)[x] = MaskDcX(p0);
<       (*mask_dc)[1].Row(y)[x] = MaskDcY(p1);
<       (*mask_dc)[2].Row(y)[x] = w_ytob_lf * MaskDcY(p1);
---
>       m0_row[x] = MaskX(p0);
>       m1_row[x] = MaskY(p1);
>       m2_row[x] = w_ytob_hf * MaskY(p1);
>       mdc0_row[x] = MaskDcX(p0);
>       mdc1_row[x] = MaskDcY(p1);
>       mdc2_row[x] = w_ytob_lf * MaskDcY(p1);
1873a2067
> #if 1  // unused ?
1895a2090
> #endif
